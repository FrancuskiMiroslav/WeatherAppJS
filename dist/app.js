/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

document.addEventListener('DOMContentLoaded', function () {
	window.addEventListener('load', (e) => {
		const preload = document.querySelector('.preload');

		preload.classList.add('preload-finished');
	});

	const btnScrollToTop = document.getElementById('btnScrollToTop');

	if (btnScrollToTop) {
		btnScrollToTop.addEventListener('click', (e) => {
			window.scrollTo({
				top: 0,
				left: 0,
				behavior: 'smooth',
			});
		});
	}

	const api = {
		key: '04afd98c4d235fb8ba117d5701f7ecf3',
		baseUrl: 'https://api.openweathermap.org/data/2.5/',
	};

	const searchBox = document.querySelector('.search-box');
	const searchBtn = document.querySelector('.submit-box');
	const form = document.getElementById('myForm');
	const single_cityEl = document.getElementById('single-city');

	async function searchCity(e) {
		e.preventDefault();

		single_cityEl.innerHTML = '';

		const term = searchBox.value;

		if (term.trim()) {
			const response = await fetch(
				`${api.baseUrl}weather?q=${term}&units=metric&APPID=${api.key}`
			);
			const data = await response.json();

			if (data === null) {
				console.log('There are no search results. Try again!');
			} else {
				const {
					name,
					main: { temp, temp_max, temp_min, humidity, feels_like },
					sys: { country },
					weather: [{ description, icon }],
					wind: { speed },
				} = data;

				single_cityEl.innerHTML = `
						<section class="location">
							<div class="city">${name}, ${country}</div>
							<div class="date">Utorak, 11.februar 2020.</div>
						</section>
						<div class="current">
							<div class="temp"> ${Math.round(temp)}
								<span> &#8451; </span>
							</div>

							<div class="weather">
								<ul class="weather__list">
									<li class="weather__list-item">Vetar: ${Math.round(speed)} km/h</li>
									<li class="weather__list-item">Vlažnost: ${Math.round(humidity)}%</li>
									<li class="weather__list-item">Osećaj: ${Math.round(
										feels_like
									)}<span> &#8451; </span></li>
									<li class="weather__list-item"><img src="http://openweathermap.org/img/w/${icon}.png" alt="${description}"><span>${description}</span></li>
								</ul>
								
							</div>

							<div class="hi-low">
								min. ${Math.round(temp_min)} <span>&#8451;</span> / max. ${Math.round(
					temp_max
				)} <span>&#8451;</span>
							</div>
						</div>
						`;

				let now = new Date();
				let date = document.querySelector('.location .date');
				date.innerText = dateBuilder(now);
			}
		} else {
			alert('Please enter a search term');
		}
	}

	function dateBuilder(d) {
		let months = [
			'Januar',
			'Februar',
			'Mart',
			'April',
			'Maj',
			'Jun',
			'Jul',
			'Avgust',
			'Septembar',
			'Oktobar',
			'Novembar',
			'Decembar',
		];
		let days = [
			'Nedelja',
			'Ponedeljak',
			'Utorak',
			'Sreda',
			'Četvrtak',
			'Petak',
			'Subota',
		];

		let day = days[d.getDay()];
		let date = d.getDate();
		let month = months[d.getMonth()];
		let year = d.getFullYear();

		return `${day}, ${date}. ${month} ${year}.`;
	}

	searchBox.addEventListener('keydown', (e) => {
		if (e.keyCode == 13 && searchBox.value != '') {
			searchCity(searchBox.value);
		}
	});

	form.addEventListener('submit', searchCity);

	searchBox.value = 'Novi Sad';
	searchBtn.click();
});


/***/ }),

/***/ "./src/js/nav.js":
/*!***********************!*\
  !*** ./src/js/nav.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

document.addEventListener('DOMContentLoaded', function () {
	const topNav = document.getElementById('top-nav');

	window.addEventListener('scroll', (e) => {
		if (document.documentElement.scrollTop > 0) {
			btnScrollToTop.style.opacity = 1;
		} else {
			btnScrollToTop.style.opacity = 0;
		}
	});
});


/***/ }),

/***/ "./src/js/tabs.js":
/*!************************!*\
  !*** ./src/js/tabs.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {




/***/ }),

/***/ 0:
/*!***************************************************************!*\
  !*** multi ./src/js/main.js ./src/js/nav.js ./src/js/tabs.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! D:\Front-end projects\JS projects\WeatherAppJS\src\js\main.js */"./src/js/main.js");
__webpack_require__(/*! D:\Front-end projects\JS projects\WeatherAppJS\src\js\nav.js */"./src/js/nav.js");
module.exports = __webpack_require__(/*! D:\Front-end projects\JS projects\WeatherAppJS\src\js\tabs.js */"./src/js/tabs.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf8;base64,
